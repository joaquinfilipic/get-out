
	CREATE TABLE IF NOT EXISTS Users (

		id			INTEGER IDENTITY	NOT NULL,
		username	VARCHAR(32)			NOT NULL,
		password	VARCHAR(60)			NOT NULL,
		name		VARCHAR(64)			NOT NULL,
		mail		VARCHAR(254)		NOT NULL,

		CONSTRAINT Users_PK PRIMARY KEY (id),
		CONSTRAINT Username_U UNIQUE (username),
		CONSTRAINT Mail_U UNIQUE (mail)
	);

	CREATE TABLE IF NOT EXISTS Client (

		id			INTEGER			NOT NULL,
		gender		VARCHAR(6)		DEFAULT 'OTHER' NOT NULL,
		avatar		BLOB			NULL,
		content		VARCHAR(16)		NULL,
		bio			VARCHAR(256)	DEFAULT '' NOT NULL,

		CHECK (gender IN ('MALE', 'FEMALE', 'OTHER')),

		CONSTRAINT Client_PK PRIMARY KEY (id),
		CONSTRAINT UsersClient_FK FOREIGN KEY (id)
			REFERENCES Users(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT
	);

	CREATE TABLE IF NOT EXISTS Pub (

		id			INTEGER IDENTITY	NOT NULL,
		userId 		INTEGER 			NOT NULL,
		name		VARCHAR(32)			NOT NULL,
		description	VARCHAR(256)		DEFAULT '' NOT NULL,
		openTime	TIME				NOT NULL,
		image		BLOB				NOT NULL,
		content		VARCHAR(16)			NOT NULL,

		CONSTRAINT Pub_PK PRIMARY KEY (id),
		CONSTRAINT Pub_U UNIQUE (name),
		CONSTRAINT UserPub_FK FOREIGN KEY (userId)
			REFERENCES Users(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT
	);

	CREATE TABLE IF NOT EXISTS Attendance (

		id 			INTEGER IDENTITY	NOT NULL,
		pubId		INTEGER				NOT NULL,
		userId 		INTEGER 			NOT NULL,
		date		DATE				NOT NULL,

		CONSTRAINT Attendance_PK PRIMARY KEY (id),
		CONSTRAINT Attendance_U UNIQUE (pubId, userId, date),
		CONSTRAINT PubAttendance_FK FOREIGN KEY (pubId)
			REFERENCES Pub(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT,
		CONSTRAINT UserAttendance_FK FOREIGN KEY (userId)
			REFERENCES Users(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT
	);

	CREATE TABLE IF NOT EXISTS Coordinates (

		id 			INTEGER IDENTITY	NOT NULL,
		pubId		INTEGER				NOT NULL,
		latitude	NUMERIC(12, 8)		NOT NULL,
		longitude	NUMERIC(12, 8)		NOT NULL,

		CONSTRAINT PubCoordinates_PK PRIMARY KEY (id),
		CONSTRAINT PubCoordinates_U UNIQUE (pubId),
		CONSTRAINT PubCoordinates_FK FOREIGN KEY (pubId)
			REFERENCES Pub(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT
	);

	CREATE TABLE IF NOT EXISTS Promo (

		id 				INTEGER IDENTITY	NOT NULL,
		pubId			INTEGER				NOT NULL,
		name			VARCHAR(32)			NOT NULL,
		description		VARCHAR(128)		NOT NULL,

		CONSTRAINT Promo_PK PRIMARY KEY (id),
		CONSTRAINT PubPromo_FK FOREIGN KEY (pubId)
			REFERENCES Pub(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT
	);

	CREATE TABLE IF NOT EXISTS PubDrink (

		id		INTEGER IDENTITY	NOT NULL,
		pubId	INTEGER				NOT NULL,
		drink	VARCHAR(32)			NOT NULL,
		price	DECIMAL(10, 2)		NOT NULL,

		CONSTRAINT PubDrink_PK PRIMARY KEY (id),
		CONSTRAINT PubDrink_FK FOREIGN KEY (pubId)
			REFERENCES Pub(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT
	);

	CREATE TABLE IF NOT EXISTS PubFood (

		id 		INTEGER IDENTITY	NOT NULL,
		pubId	INTEGER				NOT NULL,
		food	VARCHAR(32)			NOT NULL,
		price	DECIMAL(10, 2)		NOT NULL,

		CONSTRAINT PubFood_PK PRIMARY KEY (id),
		CONSTRAINT PubFood_FK FOREIGN KEY (pubId)
			REFERENCES Pub(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT
	);

	CREATE TABLE IF NOT EXISTS PubInfo (

		id			INTEGER IDENTITY	NOT NULL,
		pubId		INTEGER				NOT NULL,
		address		VARCHAR(64)			NOT NULL,
		price		DECIMAL(10, 2)		NOT NULL,

		CONSTRAINT PubInfo_PK PRIMARY KEY (id),
		CONSTRAINT PubIndo_U UNIQUE (pubId),
		CONSTRAINT PubInfo_FK FOREIGN KEY (pubId)
			REFERENCES Pub(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT
	);

	CREATE TABLE IF NOT EXISTS Likes (

		id 				INTEGER IDENTITY	NOT NULL,
		senderId		INTEGER				NOT NULL,
		receiverId		INTEGER				NOT NULL,
		pubId			INTEGER				NOT NULL,
		date			DATE				NOT NULL,

		CONSTRAINT Likes_PK PRIMARY KEY (id),
		CONSTRAINT Likes_U UNIQUE (senderId, receiverId, pubId, date),
		CONSTRAINT UserLikesFrom_FK FOREIGN KEY (senderId)
			REFERENCES Users(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT,
		CONSTRAINT UserLikesTo_FK FOREIGN KEY (receiverId)
			REFERENCES Users(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT,
		CONSTRAINT PubLikes_FK FOREIGN KEY (pubId)
			REFERENCES Pub(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT
	);

	CREATE TABLE IF NOT EXISTS Reject (

		id  			INTEGER IDENTITY	NOT NULL,
		senderId		INTEGER				NOT NULL,
		receiverId		INTEGER				NOT NULL,
		pubId			INTEGER				NOT NULL,
		date			DATE				NOT NULL,

		CONSTRAINT Reject_PK PRIMARY KEY (id),
		CONSTRAINT Reject_U UNIQUE (senderId, receiverId, pubId, date),
		CONSTRAINT UserRejectFrom_FK FOREIGN KEY (senderId)
			REFERENCES Users(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT,
		CONSTRAINT UserRejectTo_FK FOREIGN KEY (receiverId)
			REFERENCES Users(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT,
		CONSTRAINT PubReject_FK FOREIGN KEY (pubId)
			REFERENCES Pub(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT
	);

	CREATE TABLE IF NOT EXISTS PubMessage (

		id				INTEGER IDENTITY	NOT NULL,
		userId			INTEGER				NOT NULL,
		pubId			INTEGER				NOT NULL,
		timestamp		TIMESTAMP			NOT NULL,
		date			DATE				NOT NULL,
		message			VARCHAR(1024)		NOT NULL,

		CONSTRAINT PubMessage_PK PRIMARY KEY (id),
		CONSTRAINT UsersPubMessage_FK FOREIGN KEY (userId)
			REFERENCES Users(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT,
		CONSTRAINT PubPubMessage_FK FOREIGN KEY (pubId)
			REFERENCES Pub(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT
	);

	CREATE TABLE IF NOT EXISTS UserMessage (

		id				INTEGER IDENTITY	NOT NULL,
		senderId		INTEGER				NOT NULL,
		recipientId		INTEGER				NOT NULL,
		timestamp		TIMESTAMP			NOT NULL,
		message			VARCHAR(1024)		NOT NULL,

		CONSTRAINT UserMessage_PK PRIMARY KEY (id),
		CONSTRAINT SenderUserMessage_FK FOREIGN KEY (senderId)
			REFERENCES Users(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT,
		CONSTRAINT RecipientUserMessage_FK FOREIGN KEY (recipientId)
			REFERENCES Users(id)
				ON DELETE CASCADE
				ON UPDATE RESTRICT
	);

	CREATE UNIQUE INDEX IF NOT EXISTS users_id_seq ON Users(id);
	CREATE UNIQUE INDEX IF NOT EXISTS pub_id_seq ON Pub(id);

	CREATE UNIQUE INDEX IF NOT EXISTS attendance_id_seq ON Attendance(id);
	CREATE UNIQUE INDEX IF NOT EXISTS coordinates_id_seq ON Coordinates(id);
	CREATE UNIQUE INDEX IF NOT EXISTS promo_id_seq ON Promo(id);
	CREATE UNIQUE INDEX IF NOT EXISTS pubdrink_id_seq ON PubDrink(id);
	CREATE UNIQUE INDEX IF NOT EXISTS pubfood_id_seq ON PubFood(id);
	CREATE UNIQUE INDEX IF NOT EXISTS pubinfo_id_seq ON PubInfo(id);

	CREATE UNIQUE INDEX IF NOT EXISTS likes_id_seq ON Likes(id);
	CREATE UNIQUE INDEX IF NOT EXISTS reject_id_seq ON Reject(id);
	CREATE UNIQUE INDEX IF NOT EXISTS pubmessage_id_seq ON PubMessage(id);
	CREATE UNIQUE INDEX IF NOT EXISTS usermessage_id_seq ON UserMessage(id);
